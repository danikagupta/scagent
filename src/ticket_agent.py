# src/ticket_agent.py

from langchain_core.messages import SystemMessage, HumanMessage
from src.create_llm_message import create_llm_message
from src.send_email import send_email
from pydantic import BaseModel

# When TicketAgent object is created, it's initialized with a model. 
# The main entry point is the ticket_agent method. You can see workflow.add_node for ticket_agent node in graph.py

# Define Pydantic models for structured output
class TicketResponse(BaseModel):
    response: str
    createTicket: bool

class TicketEmail(BaseModel):
    response: str
    htmlEmail: str

class TicketAgent:
    
    def __init__(self, model):
        """
        Initialize the TicketAgent with a ChatOpenAI model.
        
        :param model: An instance of the ChatOpenAI model used for generating responses.
        """
        self.model = model

    def generate_ticket_response(self, state: dict) -> str:
        """
        Generate a response for ticket-related queries using the ChatOpenAI model. 
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        
        """
        user_query = state.get('initialMessage', '')

        # Define the prompt to generate a response for the user
        ticket_prompt = f"""
        You are an expert with deep knowledge of sales compensation. 
        
        The user's query was: "{user_query}"
        
        This query was not clear enouugh for you to categorize the request. As a result, you have realized that 
        you are not able to solve user's concern. 
        
        You will use the following steps:

        Step 1: If you have already created a ticket for this user, please respond politely but mark 'createTicket' as
        False, and update 'responseToUser' with a polite note for the user.

        Step 2: Check if the user has provided you their Full Name and Email Address.

        Step 3: If the user did not provide complete information ask them to provide Full Name and Email Address, 
        letting them know that you need this information to create a Sales Comp ticket.
        
        Step 4: If the user has provided the information, inform the user that this issue might require further 
        assistance from our Sales Comp Support team, and you are creating a Sales Comp ticket to get support team's help.
        
        Step 5: When user provides the information, acknowledge that you have received it, and you have created 
        a support ticket on their behalf. 

        Step 6: Create a well-articulated summary which includes user's name, email address, and issue summary.

        Step 7: If you HAVE all the information (Full name, Email address, and Issue Summary), mark 'createTicket' 
        as True, and update 'responseToUser' with a statement saying that you have created a ticket for Sales Comp 
        Support Team, and ask them if there is anything else that they need your help with. Only create a new ticket
        if you have not already created a ticket for this issue for this user. 

        Step 8: If you DON'T HAVE all the information (Full name, Email address, and Issue Summary, mark 'createTicket' 
        as False, and ask the user for this information)

        """
       
        # Create a well-formatted message for LLM by passing the retrieved information above to create_llm_messages
        llm_messages = create_llm_message(ticket_prompt)

        # Invoke the model with the well-formatted prompt, including SystemMessage, HumanMessage, and AIMessage
        llm_response = self.model.with_structured_output(TicketResponse).invoke(llm_messages)
        
        # Extract the content attribute from the llm_response object 
        full_response = llm_response
        
        return full_response

    def generate_ticket_email(self, state: dict) -> str:
        """
        Generate an email as a well-formatted html using the ChatOpenAI model.
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        
        """

        # Define the prompt to generate email for the support team
        ticket_email_prompt = f"""
        You are an expert with deep knowledge of sales compensation. The user's query was not clear enouugh for you
        to categorize the request. You have realized that you are not able to solve user's concern. 
        
        You will create an email as a well-formatted html that can be sent directly to the Sales Comp Support team.

        Please provide the email content as the field "htmlEmail".

        """
        # Create a well-formatted message for LLM by passing the retrieved information above to create_llm_messages
        llm_messages = create_llm_message(ticket_email_prompt)

        # Invoke the model with the well-formatted prompt, including SystemMessage, HumanMessage, and AIMessage
        llm_response = self.model.with_structured_output(TicketEmail).invoke(llm_messages)
        
        # Extract the content attribute from the llm_response object 
        ticket_email_response = llm_response.htmlEmail
        return ticket_email_response

    def ticket_agent(self, state: dict) -> dict:
        """
        Handle ticket-related queries by generating a response using the ChatOpenAI model.
        
        :param state: A dictionary containing the state of the current conversation, including the user's initial message.
        :return: A dictionary with the updated state, including the response and the node category.
        """
        # Generate a response based on the user's initial message
        full_response = self.generate_ticket_response(state)


        if full_response.createTicket:
            # Generate an email that can be sent to ServiceNow ticketing system
            ticket_email_response = self.generate_ticket_email(state)

            # Send the generated ticket response as an email to the support team
            send_email(from_email='malihajburney@gmail.com', 
                            to_email='i_jahangir@hotmail.com', 
                        subject='New Ticket from SalesCompAgent', 
                        html_content=ticket_email_response)
            
        # Return the updated state with the generated response and the category set to 'ticket'.
        return {
            "lnode": "ticket_agent", 
            "responseToUser": full_response.response,
            "category": "ticket"
        }