# src/clarify_agent.py

import streamlit as st
from src.create_llm_message import create_llm_message
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage

# When ClarifyAgent object is created, it's initialized with a model. 
# The main entry point is the clarify_agent method. You can see workflow.add_node for clarify_agent node in graph.py

class ClarifyAgent:
    
    def __init__(self, model):
        """
        Initialize the ClarifyAgent with a ChatOpenAI model.
        
        :param model: An instance of the ChatOpenAI model used for generating responses.
        """
        self.model = model
    
    def clarify_and_classify(self, user_query: str) -> str:
        """
        Generate a response which clarifies user's query using the ChatOpenAI model.
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        """
        clarify_prompt = f"""
        You are a sales compensation expert with deep knowledge in the field. The user's query is not clear enough 
        for you to categorize the request. Your goal is to assist the user in clarifying their needs and provide 
        appropriate assistance. Always maintain a friendly, professional, and helpful tone throughout the interaction.

        User's query: {user_query}

        Instructions:

        1. Request Clarification:

            - Politely ask the user to provide more details about the help they need.
            - Example: "Could you please elaborate on how I can assist you with sales compensation related queries?"
        
        2. Categorize the Request:

            - If the user's response is clear, select the appropriate category from the classifier node.
        
        3. Escalate if Still Unclear:

            - If the user's response is still not clear enough for you to categorize the request, inform them that 
            this issue might require further assistance from our support team.
            - Let them know you are creating a Sales Compensation support ticket to get the support team's help.
        
        4. Collect Contact Information:

            - Ask for the user's full name and email address to proceed with the support ticket.
        
        5. Summarize and Document:

            - Summarize the conversation to create a Sales Compensation Support Ticket.

            - Use the following format:
                Employee name: 
                Employee email:
                Issue description:
        
        """

        # Create a well-formatted message for LLM by passing the retrieved information above to create_llm_messages
        llm_messages = create_llm_message(clarify_prompt)

        # Invoke the model with the well-formatted prompt, including SystemMessage, HumanMessage, and AIMessage
        llm_response = self.model.invoke(llm_messages)
        
        # Extract the content attribute from the llm_response object 
        full_response = llm_response.content
        return full_response
     

    def clarify_agent(self, state: dict) -> dict:
        """
        Handle queries that require clarification and attempt to classify them again.
        
        :param state: A dictionary containing the state of the current conversation, including the user's initial message.
        :return: A dictionary with the updated state based on the user's clarified response.
        """
        # Generate a response based on the user's initial message
        full_response = self.clarify_and_classify(state['initialMessage'])
        
        # Return the updated state with the generated response and the category set to 'clarify'
        return {
            "lnode": "clarify_agent", 
            "responseToUser": full_response,
            "category": "clarify"
        }
